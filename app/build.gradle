apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.android.application'
//deprecated since android plugin 2.2
//apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion 26
    buildToolsVersion '25.0.3'

    defaultConfig {
        applicationId "hu.andras.mypocapplication"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

//  Jack currently incompatible with databinding. Comment back and remove retrolambda to use native labda expression
//        jackOptions {
//            enabled true
//        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "number", "letter"

    productFlavors {
        flavor1 {
            dimension "number"
        }

        flavor2 {
            dimension "number"
        }

        flavorA {
            dimension "letter"
        }

        flavorB {
            dimension "letter"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            resValue "string", "maps_key", "debugkey"
        }

//        release {
//            minifyEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            proguardFiles 'proguard-rules.pro'
//            signingConfig signingConfigs.release
//            resValue "string", "maps_key", "releasekey"
//        }
    }

    signingConfigs {

        debug {
            storeFile file("debug.keystore")
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storePassword 'android'
        }

//        release {
//            storeFile file(System.getenv("keyfile"))
//            storePassword System.getenv("pwd")
//            keyAlias System.getenv("alias")
//            keyPassword System.getenv("pwd")
//        }
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    annotationProcessor 'com.android.databinding:compiler:2.2.3'
    compile 'com.google.android.gms:play-services-maps:11.0.4'
    compile 'com.google.android.gms:play-services-analytics:11.0.4'
    compile 'com.google.android.gms:play-services-location:11.0.4'
    compile 'com.google.android.gms:play-services-places:11.0.4'
    compile 'com.google.android.gms:play-services-auth:11.0.4'
    compile 'com.android.support:cardview-v7:26.0.0'
    compile 'com.android.support:recyclerview-v7:26.0.0'
    compile 'com.android.support:design:26.0.0'
    compile 'com.jakewharton:butterknife:6.1.0'
    compile 'com.annimon:stream:1.0.1'
    compile 'com.google.maps.android:android-maps-utils:0.4'
    compile 'com.j256.ormlite:ormlite-android:4.48'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.google.guava:guava:20.0'
    compile 'com.annimon:stream:1.0.5'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'

    compile "android.arch.lifecycle:runtime:1.0.0-alpha9"
    compile "android.arch.lifecycle:extensions:1.0.0-alpha9"
    annotationProcessor "android.arch.lifecycle:compiler:1.0.0-alpha9"

    compile 'io.reactivex:rxandroid:1.2.1'
// Because RxAndroid releases are few and far between, it is recommended you also
// explicitly depend on RxJava's latest version for bug fixes and new features.
    compile 'io.reactivex:rxjava:1.2.3'

    //dagger dependencies
    annotationProcessor 'com.google.dagger:dagger-compiler:2.5'
    compile 'com.google.dagger:dagger:2.5'
    provided 'javax.annotation:jsr250-api:1.0'
    compile project(':modules:module1')

    testCompile 'junit:junit:4.12'
}

//this line has to be placed after the dependency declarations
apply plugin: 'com.google.gms.google-services'


afterEvaluate {
    //createZipTasks()
}

//This will create a task for every release assemble task which will zip the output apk with the corresponding version txt file
def createZipTasks() {
    android.applicationVariants.all { variant ->
        if (variant.buildType.name.equals(android.buildTypes.release.name)) {
            variant.outputs.each { output ->
                Task assembleTask = output.assemble
                def outputDir = output.outputFile.parent
                def versionFile = new File(outputDir, 'app_version.txt')
                versionFile.write(String.valueOf(variant.versionCode))

                Task zipTask = tasks.create(name: 'zipTask-' + assembleTask.name, type: Zip) {
                    from versionFile
                    from output.outputFile
                    archiveName 'classic-android-' + variant.baseName + '-v' + variant.versionName + '.zip'
                }

                assembleTask.finalizedBy(zipTask)
            }
        }
    }
}


